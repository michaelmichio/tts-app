openapi: 3.0.3
info:
  title: TTS Backend API
  version: 0.1.0
servers:
  - url: http://localhost:8080
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
paths:
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: OK
  /api/auth/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        "201": { description: Created }
        "409": { description: Email in use }
  /api/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        "200":
          description: OK (returns token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:
                    type: object
                    properties:
                      id: { type: string }
                      email: { type: string }
        "401": { description: Invalid credentials }
  /api/conversions:
    get:
      summary: List conversions
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: OK }
    post:
      summary: Create conversion
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text, voiceURI, voiceName, voiceLang, rate, pitch, volume]
              properties:
                text: { type: string }
                voiceURI: { type: string }
                voiceName: { type: string }
                voiceLang: { type: string }
                rate: { type: number }
                pitch: { type: number }
                volume: { type: number }
                mediaId: { type: string, nullable: true }
      responses:
        "201": { description: Created }
  /api/media:
    post:
      summary: Upload MP3
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201": { description: Created }
  /api/media/{id}:
    get:
      summary: Download MP3
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        "200":
          description: File
